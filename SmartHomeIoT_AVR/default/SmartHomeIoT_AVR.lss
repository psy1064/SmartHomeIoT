
SmartHomeIoT_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800118  00800118  0000078c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001e1  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de2  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ff  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009be  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029a  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041d  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
  c6:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <pin_init>:
}


void pin_init()
{
	DDRB |= 0x10;     // LED (PB4 : 출력설정 )
  ce:	bc 9a       	sbi	0x17, 4	; 23
	PORTB &= ~0x10;   // PB4  : High ( LED OFF) 
  d0:	c4 98       	cbi	0x18, 4	; 24
}
  d2:	08 95       	ret

000000d4 <init_serial>:

	TCCR0 |= 0x07; // Clock Prescaler N=1024 (Timer 0 Start)
}
void init_serial(void)
{
    UCSR0A = 0x00;                    //초기화
  d4:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x18  ;                  //송수신허용,  송수신 인터럽트 금지
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;                    //데이터 전송비트 수 8비트로 설정.
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	80 93 95 00 	sts	0x0095, r24
    
    UBRR0H = 0x00;
  e0:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 103;                     //Baud Rate 9600 
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	89 b9       	out	0x09, r24	; 9
}
  e8:	08 95       	ret

000000ea <Request>:
	_delay_ms(10);
}

void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
  ea:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
  ec:	94 98       	cbi	0x12, 4	; 18
  ee:	88 ec       	ldi	r24, 0xC8	; 200
  f0:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	20 e9       	ldi	r18, 0x90	; 144
  f4:	31 e0       	ldi	r19, 0x01	; 1
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <Request+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <Request+0xc>
	_delay_ms(20);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
 100:	94 9a       	sbi	0x12, 4	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 102:	85 ed       	ldi	r24, 0xD5	; 213
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <Request+0x1a>
	_delay_us(40);
}
 108:	08 95       	ret

0000010a <Response>:

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
 10a:	8c 98       	cbi	0x11, 4	; 17
	while(PIND & (1<<DHT11_PIN));
 10c:	84 99       	sbic	0x10, 4	; 16
 10e:	fe cf       	rjmp	.-4      	; 0x10c <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);
 110:	84 9b       	sbis	0x10, 4	; 16
 112:	fe cf       	rjmp	.-4      	; 0x110 <Response+0x6>
	while(PIND & (1<<DHT11_PIN));
 114:	84 99       	sbic	0x10, 4	; 16
 116:	fe cf       	rjmp	.-4      	; 0x114 <Response+0xa>
}
 118:	08 95       	ret

0000011a <Receive_data>:

uint8_t Receive_data()			/* receive data */
{	
 11a:	80 91 18 01 	lds	r24, 0x0118
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 ea       	ldi	r20, 0xA0	; 160
	for (int q=0; q<8; q++)
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
 124:	84 9b       	sbis	0x10, 4	; 16
 126:	fe cf       	rjmp	.-4      	; 0x124 <Receive_data+0xa>
 128:	94 2f       	mov	r25, r20
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <Receive_data+0x10>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN)) /* if high pulse is greater than 30ms */
 12e:	84 9b       	sbis	0x10, 4	; 16
 130:	03 c0       	rjmp	.+6      	; 0x138 <Receive_data+0x1e>
		{
			c = (c<<1)|(0x01);	/* then its logic HIGH */
 132:	88 0f       	add	r24, r24
 134:	81 60       	ori	r24, 0x01	; 1
 136:	01 c0       	rjmp	.+2      	; 0x13a <Receive_data+0x20>
		}
		else			/* otherwise its logic LOW */
		{
			c = (c<<1);
 138:	88 0f       	add	r24, r24
		}

		while(PIND & (1<<DHT11_PIN));
 13a:	84 99       	sbic	0x10, 4	; 16
 13c:	fe cf       	rjmp	.-4      	; 0x13a <Receive_data+0x20>
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()			/* receive data */
{	
	for (int q=0; q<8; q++)
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	28 30       	cpi	r18, 0x08	; 8
 144:	31 05       	cpc	r19, r1
 146:	71 f7       	brne	.-36     	; 0x124 <Receive_data+0xa>
 148:	80 93 18 01 	sts	0x0118, r24

		while(PIND & (1<<DHT11_PIN));
		
	}
	return c;
}
 14c:	08 95       	ret

0000014e <SerialPutChar>:

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 14e:	5d 9b       	sbis	0x0b, 5	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <SerialPutChar>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 152:	8c b9       	out	0x0c, r24	; 12
} // 한 문자를 송신한다.
 154:	08 95       	ret

00000156 <SerialPutString>:

void SerialPutString(char *str)
 {
 156:	fc 01       	movw	r30, r24
 158:	04 c0       	rjmp	.+8      	; 0x162 <SerialPutString+0xc>
	return c;
}

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 15a:	5d 9b       	sbis	0x0b, 5	; 11
 15c:	fe cf       	rjmp	.-4      	; 0x15a <SerialPutString+0x4>
void SerialPutString(char *str)
 {

    while(*str != '\0')          // 수신된 문자가 Null 문자( 0x00 )가 아니면 
    {
        SerialPutChar(*str++);
 15e:	31 96       	adiw	r30, 0x01	; 1
}

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 160:	8c b9       	out	0x0c, r24	; 12
} // 한 문자를 송신한다.

void SerialPutString(char *str)
 {

    while(*str != '\0')          // 수신된 문자가 Null 문자( 0x00 )가 아니면 
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	c9 f7       	brne	.-14     	; 0x15a <SerialPutString+0x4>
    {
        SerialPutChar(*str++);
    }
} // 문자열을 송신한다.
 168:	08 95       	ret

0000016a <sendDHT>:
    UBRR0H = 0x00;
    UBRR0L = 103;                     //Baud Rate 9600 
}
void sendDHT()
{
	SerialPutString(i_temp);
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 ab 00 	call	0x156	; 0x156 <SerialPutString>
	return c;
}

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <sendDHT+0x8>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 176:	8e e2       	ldi	r24, 0x2E	; 46
 178:	8c b9       	out	0x0c, r24	; 12
}
void sendDHT()
{
	SerialPutString(i_temp);
	SerialPutChar('.');
	SerialPutString(d_temp);
 17a:	81 e3       	ldi	r24, 0x31	; 49
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 ab 00 	call	0x156	; 0x156 <SerialPutString>
	return c;
}

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 182:	5d 9b       	sbis	0x0b, 5	; 11
 184:	fe cf       	rjmp	.-4      	; 0x182 <sendDHT+0x18>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 186:	8c e2       	ldi	r24, 0x2C	; 44
 188:	8c b9       	out	0x0c, r24	; 12
{
	SerialPutString(i_temp);
	SerialPutChar('.');
	SerialPutString(d_temp);
	SerialPutChar(',');
	SerialPutString(i_rh);
 18a:	85 e2       	ldi	r24, 0x25	; 37
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 ab 00 	call	0x156	; 0x156 <SerialPutString>
	return c;
}

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 192:	5d 9b       	sbis	0x0b, 5	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <sendDHT+0x28>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 196:	8e e2       	ldi	r24, 0x2E	; 46
 198:	8c b9       	out	0x0c, r24	; 12
	SerialPutChar('.');
	SerialPutString(d_temp);
	SerialPutChar(',');
	SerialPutString(i_rh);
	SerialPutChar('.');
	SerialPutString(d_rh);
 19a:	8a e2       	ldi	r24, 0x2A	; 42
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 ab 00 	call	0x156	; 0x156 <SerialPutString>
}
 1a2:	08 95       	ret

000001a4 <HexToDec>:
    LcdPutchar(NumToAsc(cnumber[0]));    // 0.1 자리 디스플레이 
}


void HexToDec( unsigned short num, unsigned short radix) 
{
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	9c 01       	movw	r18, r24
 1ae:	8b 01       	movw	r16, r22
	int j ;

	for(j=0; j<5 ; j++) cnumber[j] = 0 ;
 1b0:	10 92 19 01 	sts	0x0119, r1
 1b4:	10 92 1a 01 	sts	0x011A, r1
 1b8:	10 92 1b 01 	sts	0x011B, r1
 1bc:	10 92 1c 01 	sts	0x011C, r1
 1c0:	10 92 1d 01 	sts	0x011D, r1
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0

	j=0;
	do
	{
		cnumber[j++] = num % radix ; 
 1c8:	c9 01       	movw	r24, r18
 1ca:	b8 01       	movw	r22, r16
 1cc:	0e 94 29 03 	call	0x652	; 0x652 <__udivmodhi4>
 1d0:	fe 01       	movw	r30, r28
 1d2:	e7 5e       	subi	r30, 0xE7	; 231
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	80 83       	st	Z, r24
 1d8:	21 96       	adiw	r28, 0x01	; 1
		num /= radix; 
 1da:	c9 01       	movw	r24, r18
 1dc:	b8 01       	movw	r22, r16
 1de:	0e 94 29 03 	call	0x652	; 0x652 <__udivmodhi4>
 1e2:	9b 01       	movw	r18, r22

	} while(num);
 1e4:	61 15       	cp	r22, r1
 1e6:	71 05       	cpc	r23, r1
 1e8:	79 f7       	brne	.-34     	; 0x1c8 <HexToDec+0x24>

} 
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <NumToAsc>:

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 1f4:	8a 30       	cpi	r24, 0x0A	; 10
 1f6:	10 f4       	brcc	.+4      	; 0x1fc <NumToAsc+0x8>
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	08 95       	ret
	else          Num += 0x37; 
 1fc:	89 5c       	subi	r24, 0xC9	; 201

	return Num ;
}
 1fe:	08 95       	ret

00000200 <msec_delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 200:	20 ea       	ldi	r18, 0xA0	; 160
 202:	3f e0       	ldi	r19, 0x0F	; 15
 204:	04 c0       	rjmp	.+8      	; 0x20e <msec_delay+0xe>
 206:	f9 01       	movw	r30, r18
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <msec_delay+0x8>



void msec_delay(unsigned int n)
{	
	for(; n>0; n--)		// 1msec 시간 지연을 n회 반복
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	d1 f7       	brne	.-12     	; 0x206 <msec_delay+0x6>
		_delay_ms(1);		// 1msec 시간 지연
}
 212:	08 95       	ret

00000214 <usec_delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 214:	35 e0       	ldi	r19, 0x05	; 5
 216:	04 c0       	rjmp	.+8      	; 0x220 <usec_delay+0xc>
 218:	23 2f       	mov	r18, r19
 21a:	2a 95       	dec	r18
 21c:	f1 f7       	brne	.-4      	; 0x21a <usec_delay+0x6>

void usec_delay(unsigned int n)
{	
	for(; n>0; n--)		// 1usec 시간 지연을 n회 반복
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	d1 f7       	brne	.-12     	; 0x218 <usec_delay+0x4>
		_delay_us(1);		// 1usec 시간 지연
}
 224:	08 95       	ret

00000226 <Display_Number_LCD>:
} // 문자열을 송신한다.
  // 입력   : str - 송신한 문자열을 저장할 버퍼의 주소


void Display_Number_LCD( unsigned int num, unsigned char digit )       // 부호없는 정수형 변수를 10진수 형태로 LCD 에 디스플레이 
{
 226:	1f 93       	push	r17
 228:	16 2f       	mov	r17, r22

	HexToDec( num, 10); //10진수로 변환 
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <HexToDec>

	if( digit == 0 )     digit = 1 ;
 232:	11 23       	and	r17, r17
 234:	81 f1       	breq	.+96     	; 0x296 <Display_Number_LCD+0x70>
	if( digit > 5 )      digit = 5 ;
 236:	16 30       	cpi	r17, 0x06	; 6
 238:	10 f0       	brcs	.+4      	; 0x23e <Display_Number_LCD+0x18>
 23a:	15 e0       	ldi	r17, 0x05	; 5
 23c:	02 c0       	rjmp	.+4      	; 0x242 <Display_Number_LCD+0x1c>
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
 23e:	15 30       	cpi	r17, 0x05	; 5
 240:	49 f4       	brne	.+18     	; 0x254 <Display_Number_LCD+0x2e>
 242:	80 91 1d 01 	lds	r24, 0x011D

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 246:	8a 30       	cpi	r24, 0x0A	; 10
 248:	10 f4       	brcc	.+4      	; 0x24e <Display_Number_LCD+0x28>
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	01 c0       	rjmp	.+2      	; 0x250 <Display_Number_LCD+0x2a>
	else          Num += 0x37; 
 24e:	89 5c       	subi	r24, 0xC9	; 201
	HexToDec( num, 10); //10진수로 변환 

	if( digit == 0 )     digit = 1 ;
	if( digit > 5 )      digit = 5 ;
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
 250:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 254:	14 30       	cpi	r17, 0x04	; 4
 256:	48 f0       	brcs	.+18     	; 0x26a <Display_Number_LCD+0x44>
 258:	80 91 1c 01 	lds	r24, 0x011C

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	10 f4       	brcc	.+4      	; 0x264 <Display_Number_LCD+0x3e>
 260:	80 5d       	subi	r24, 0xD0	; 208
 262:	01 c0       	rjmp	.+2      	; 0x266 <Display_Number_LCD+0x40>
	else          Num += 0x37; 
 264:	89 5c       	subi	r24, 0xC9	; 201
	if( digit == 0 )     digit = 1 ;
	if( digit > 5 )      digit = 5 ;
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 266:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 26a:	13 30       	cpi	r17, 0x03	; 3
 26c:	48 f0       	brcs	.+18     	; 0x280 <Display_Number_LCD+0x5a>
 26e:	80 91 1b 01 	lds	r24, 0x011B

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	10 f4       	brcc	.+4      	; 0x27a <Display_Number_LCD+0x54>
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	01 c0       	rjmp	.+2      	; 0x27c <Display_Number_LCD+0x56>
	else          Num += 0x37; 
 27a:	89 5c       	subi	r24, 0xC9	; 201
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 27c:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 280:	11 30       	cpi	r17, 0x01	; 1
 282:	49 f0       	breq	.+18     	; 0x296 <Display_Number_LCD+0x70>
 284:	80 91 1a 01 	lds	r24, 0x011A

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 288:	8a 30       	cpi	r24, 0x0A	; 10
 28a:	10 f4       	brcc	.+4      	; 0x290 <Display_Number_LCD+0x6a>
 28c:	80 5d       	subi	r24, 0xD0	; 208
 28e:	01 c0       	rjmp	.+2      	; 0x292 <Display_Number_LCD+0x6c>
	else          Num += 0x37; 
 290:	89 5c       	subi	r24, 0xC9	; 201
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 292:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>

	if( digit >= 1 )     LcdPutchar(NumToAsc(cnumber[0]));    //  1자리 디스플레이
 296:	80 91 19 01 	lds	r24, 0x0119

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 29a:	8a 30       	cpi	r24, 0x0A	; 10
 29c:	10 f4       	brcc	.+4      	; 0x2a2 <Display_Number_LCD+0x7c>
 29e:	80 5d       	subi	r24, 0xD0	; 208
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <Display_Number_LCD+0x7e>
	else          Num += 0x37; 
 2a2:	89 5c       	subi	r24, 0xC9	; 201

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이

	if( digit >= 1 )     LcdPutchar(NumToAsc(cnumber[0]));    //  1자리 디스플레이
 2a4:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>

}
 2a8:	1f 91       	pop	r17
 2aa:	08 95       	ret

000002ac <Display_TMP_LCD>:


void Display_TMP_LCD( unsigned int tp  )       // 온도를 10진수 형태로 LCD 에 디스플레이 
{

	HexToDec( tp, 10); //10진수로 변환 
 2ac:	6a e0       	ldi	r22, 0x0A	; 10
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <HexToDec>

    LcdPutchar(NumToAsc(cnumber[2]) );   // 10자리 디스플레이
 2b4:	80 91 1b 01 	lds	r24, 0x011B

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 2b8:	8a 30       	cpi	r24, 0x0A	; 10
 2ba:	10 f4       	brcc	.+4      	; 0x2c0 <Display_TMP_LCD+0x14>
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <Display_TMP_LCD+0x16>
	else          Num += 0x37; 
 2c0:	89 5c       	subi	r24, 0xC9	; 201
void Display_TMP_LCD( unsigned int tp  )       // 온도를 10진수 형태로 LCD 에 디스플레이 
{

	HexToDec( tp, 10); //10진수로 변환 

    LcdPutchar(NumToAsc(cnumber[2]) );   // 10자리 디스플레이
 2c2:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>
	
    LcdPutchar(NumToAsc(cnumber[1]));    // 1자리 디스플레이 
 2c6:	80 91 1a 01 	lds	r24, 0x011A

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 2ca:	8a 30       	cpi	r24, 0x0A	; 10
 2cc:	10 f4       	brcc	.+4      	; 0x2d2 <Display_TMP_LCD+0x26>
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <Display_TMP_LCD+0x28>
	else          Num += 0x37; 
 2d2:	89 5c       	subi	r24, 0xC9	; 201

	HexToDec( tp, 10); //10진수로 변환 

    LcdPutchar(NumToAsc(cnumber[2]) );   // 10자리 디스플레이
	
    LcdPutchar(NumToAsc(cnumber[1]));    // 1자리 디스플레이 
 2d4:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>

    LcdPuts( ".");                       // 소숫점(.) 디스플레이 
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>

    LcdPutchar(NumToAsc(cnumber[0]));    // 0.1 자리 디스플레이 
 2e0:	80 91 19 01 	lds	r24, 0x0119

} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 2e4:	8a 30       	cpi	r24, 0x0A	; 10
 2e6:	10 f4       	brcc	.+4      	; 0x2ec <Display_TMP_LCD+0x40>
 2e8:	80 5d       	subi	r24, 0xD0	; 208
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <Display_TMP_LCD+0x42>
	else          Num += 0x37; 
 2ec:	89 5c       	subi	r24, 0xC9	; 201
	
    LcdPutchar(NumToAsc(cnumber[1]));    // 1자리 디스플레이 

    LcdPuts( ".");                       // 소숫점(.) 디스플레이 

    LcdPutchar(NumToAsc(cnumber[0]));    // 0.1 자리 디스플레이 
 2ee:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>
}
 2f2:	08 95       	ret

000002f4 <getDHT>:
	SerialPutString(d_rh);
}
void getDHT()
{

	Request();		/* send start pulse */
 2f4:	0e 94 75 00 	call	0xea	; 0xea <Request>
	Response();		/* receive response */
 2f8:	0e 94 85 00 	call	0x10a	; 0x10a <Response>
	I_RH=Receive_data();	/* store first eight bit in I_RH */
 2fc:	0e 94 8d 00 	call	0x11a	; 0x11a <Receive_data>
 300:	80 93 37 01 	sts	0x0137, r24
	D_RH=Receive_data();	/* store next eight bit in D_RH */
 304:	0e 94 8d 00 	call	0x11a	; 0x11a <Receive_data>
 308:	80 93 2f 01 	sts	0x012F, r24
	I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 30c:	0e 94 8d 00 	call	0x11a	; 0x11a <Receive_data>
 310:	80 93 36 01 	sts	0x0136, r24
	D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 314:	0e 94 8d 00 	call	0x11a	; 0x11a <Receive_data>
 318:	80 93 38 01 	sts	0x0138, r24
	CheckSum=Receive_data();/* store next eight bit in CheckSum */
 31c:	0e 94 8d 00 	call	0x11a	; 0x11a <Receive_data>
 320:	80 93 30 01 	sts	0x0130, r24
	
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 324:	20 91 37 01 	lds	r18, 0x0137
 328:	62 2f       	mov	r22, r18
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	20 91 2f 01 	lds	r18, 0x012F
 330:	ab 01       	movw	r20, r22
 332:	42 0f       	add	r20, r18
 334:	51 1d       	adc	r21, r1
 336:	9a 01       	movw	r18, r20
 338:	40 91 36 01 	lds	r20, 0x0136
 33c:	24 0f       	add	r18, r20
 33e:	31 1d       	adc	r19, r1
 340:	40 91 38 01 	lds	r20, 0x0138
 344:	24 0f       	add	r18, r20
 346:	31 1d       	adc	r19, r1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	28 17       	cp	r18, r24
 34c:	39 07       	cpc	r19, r25
 34e:	39 f0       	breq	.+14     	; 0x35e <getDHT+0x6a>
	{
		LcdMove(0,0);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts("Error");
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	60 c0       	rjmp	.+192    	; 0x41e <getDHT+0x12a>
	}
		
	else
	{	
		itoa(I_RH,i_rh,10);
 35e:	cb 01       	movw	r24, r22
 360:	65 e2       	ldi	r22, 0x25	; 37
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	4a e0       	ldi	r20, 0x0A	; 10
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	0e 94 3d 03 	call	0x67a	; 0x67a <itoa>
		LcdMove(0,4);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	64 e0       	ldi	r22, 0x04	; 4
 370:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts(i_rh);
 374:	85 e2       	ldi	r24, 0x25	; 37
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
		LcdMove(0,6);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	66 e0       	ldi	r22, 0x06	; 6
 380:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts(".");
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
			
		itoa(D_RH,d_rh,10);
 38c:	80 91 2f 01 	lds	r24, 0x012F
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	6a e2       	ldi	r22, 0x2A	; 42
 394:	71 e0       	ldi	r23, 0x01	; 1
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	0e 94 3d 03 	call	0x67a	; 0x67a <itoa>
		LcdMove(0,7);
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	67 e0       	ldi	r22, 0x07	; 7
 3a2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts(d_rh);
 3a6:	8a e2       	ldi	r24, 0x2A	; 42
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
		LcdMove(0,8);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	68 e0       	ldi	r22, 0x08	; 8
 3b2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts("%");
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
		itoa(I_Temp,i_temp,10);
 3be:	80 91 36 01 	lds	r24, 0x0136
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	60 e2       	ldi	r22, 0x20	; 32
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	4a e0       	ldi	r20, 0x0A	; 10
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	0e 94 3d 03 	call	0x67a	; 0x67a <itoa>
		LcdMove(1,4);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts(i_temp);
 3d8:	80 e2       	ldi	r24, 0x20	; 32
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
		LcdMove(1,6);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	66 e0       	ldi	r22, 0x06	; 6
 3e4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts(".");
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
			
		itoa(D_Temp,d_temp,10);
 3f0:	80 91 38 01 	lds	r24, 0x0138
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	61 e3       	ldi	r22, 0x31	; 49
 3f8:	71 e0       	ldi	r23, 0x01	; 1
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	0e 94 3d 03 	call	0x67a	; 0x67a <itoa>
		LcdMove(1,7);
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	67 e0       	ldi	r22, 0x07	; 7
 406:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts(d_temp);
 40a:	81 e3       	ldi	r24, 0x31	; 49
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
		LcdMove(1,8);
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	68 e0       	ldi	r22, 0x08	; 8
 416:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
		LcdPuts("C");
 41a:	8a e0       	ldi	r24, 0x0A	; 10
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 422:	80 e4       	ldi	r24, 0x40	; 64
 424:	9c e9       	ldi	r25, 0x9C	; 156
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <getDHT+0x132>
		
	}
				
	_delay_ms(10);
}
 42a:	08 95       	ret

0000042c <__vector_16>:
	}
} 


ISR(TIMER0_OVF_vect)   // Timer0 overflow interrupt( 10 msec)  service routine
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	0b b6       	in	r0, 0x3b	; 59
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31

	static unsigned short  time_index = 0, send_time_index = 0;

    TCNT0 = 256 - 156;       //  내부클럭주기 = 1024/ (16x10^6) = 64 usec,  
 452:	84 e6       	ldi	r24, 0x64	; 100
 454:	82 bf       	out	0x32, r24	; 50
                             //  오버플로인터럽트 주기 = 10msec
                             //  156 = 10msec/ 64usec

    time_index++ ; 
 456:	80 91 1e 01 	lds	r24, 0x011E
 45a:	90 91 1f 01 	lds	r25, 0x011F
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	90 93 1f 01 	sts	0x011F, r25
 464:	80 93 1e 01 	sts	0x011E, r24
	
    if( time_index == 500 )    // 샘플링주기 10msec
 468:	84 5f       	subi	r24, 0xF4	; 244
 46a:	91 40       	sbci	r25, 0x01	; 1
 46c:	41 f4       	brne	.+16     	; 0x47e <__vector_16+0x52>
    {
       time_index = 0; 
 46e:	10 92 1f 01 	sts	0x011F, r1
 472:	10 92 1e 01 	sts	0x011E, r1
	   getDHT();
 476:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <getDHT>
	   sendDHT();
 47a:	0e 94 b5 00 	call	0x16a	; 0x16a <sendDHT>
	   
   }
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0b be       	out	0x3b, r0	; 59
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <init>:
	DDRB |= 0x10;     // LED (PB4 : 출력설정 )
	PORTB &= ~0x10;   // PB4  : High ( LED OFF) 
}
void init()
{
	LcdInit();
 4a4:	0e 94 02 03 	call	0x604	; 0x604 <LcdInit>

	LcdCommand(ALLCLR);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>
	LcdMove(0,0);  
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
	LcdPuts("HUM=");
 4b6:	8c e0       	ldi	r24, 0x0C	; 12
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>
	LcdMove(1,0); 
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LcdMove>
	LcdPuts("TMP= ");
 4c6:	81 e1       	ldi	r24, 0x11	; 17
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 9c 02 	call	0x538	; 0x538 <LcdPuts>


/**** Timer0 Overflow Interrupt  ******/

	TCCR0 = 0x00; 
 4ce:	13 be       	out	0x33, r1	; 51
    TCNT0 = 256 - 100;       //  내부클럭주기 = 8/ (16x10^6) = 0.5 usec,  
 4d0:	8c e9       	ldi	r24, 0x9C	; 156
 4d2:	82 bf       	out	0x32, r24	; 50
                             //  오버플로인터럽트 주기 = 50usec
                             //  156 = 50usec/ 0.5use

	TIMSK = 0x01;  // Timer0 overflow interrupt enable 
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	87 bf       	out	0x37, r24	; 55
	sei();         // Global Interrupt Enable 
 4d8:	78 94       	sei


	TCCR0 |= 0x07; // Clock Prescaler N=1024 (Timer 0 Start)
 4da:	83 b7       	in	r24, 0x33	; 51
 4dc:	87 60       	ori	r24, 0x07	; 7
 4de:	83 bf       	out	0x33, r24	; 51
}
 4e0:	08 95       	ret

000004e2 <main>:
}


void pin_init()
{
	DDRB |= 0x10;     // LED (PB4 : 출력설정 )
 4e2:	bc 9a       	sbi	0x17, 4	; 23
	PORTB &= ~0x10;   // PB4  : High ( LED OFF) 
 4e4:	c4 98       	cbi	0x18, 4	; 24


int main() 
{   
	pin_init();		  // Pin 초기화
	init();			  // Interrupt , Timer, Register 초기화 
 4e6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <init>

	TCCR0 |= 0x07; // Clock Prescaler N=1024 (Timer 0 Start)
}
void init_serial(void)
{
    UCSR0A = 0x00;                    //초기화
 4ea:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x18  ;                  //송수신허용,  송수신 인터럽트 금지
 4ec:	88 e1       	ldi	r24, 0x18	; 24
 4ee:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;                    //데이터 전송비트 수 8비트로 설정.
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	80 93 95 00 	sts	0x0095, r24
    
    UBRR0H = 0x00;
 4f6:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 103;                     //Baud Rate 9600 
 4fa:	87 e6       	ldi	r24, 0x67	; 103
 4fc:	89 b9       	out	0x09, r24	; 9
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <main+0x1c>

00000500 <LcdPutchar>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 500:	95 e3       	ldi	r25, 0x35	; 53
 502:	29 2f       	mov	r18, r25
 504:	2a 95       	dec	r18
 506:	f1 f7       	brne	.-4      	; 0x504 <LcdPutchar+0x4>

static void write_data(char ch)
{
	unsigned char temp;

	temp = (ch & 0xF0) | 0x05;
 508:	29 2f       	mov	r18, r25
 50a:	2a 95       	dec	r18
 50c:	f1 f7       	brne	.-4      	; 0x50a <LcdPutchar+0xa>
 50e:	29 2f       	mov	r18, r25
 510:	2a 95       	dec	r18
 512:	f1 f7       	brne	.-4      	; 0x510 <LcdPutchar+0x10>
 514:	29 2f       	mov	r18, r25
 516:	2a 95       	dec	r18
 518:	f1 f7       	brne	.-4      	; 0x516 <LcdPutchar+0x16>
 51a:	9a 95       	dec	r25
 51c:	f1 f7       	brne	.-4      	; 0x51a <LcdPutchar+0x1a>
 51e:	98 2f       	mov	r25, r24
 520:	90 7f       	andi	r25, 0xF0	; 240
 522:	95 60       	ori	r25, 0x05	; 5

	LCD_PORT = temp;
 524:	95 bb       	out	0x15, r25	; 21
	LCD_PORT = temp & ~0x04;
 526:	9b 7f       	andi	r25, 0xFB	; 251
 528:	95 bb       	out	0x15, r25	; 21

	temp = (ch<<4) | 0x05;
 52a:	82 95       	swap	r24
 52c:	80 7f       	andi	r24, 0xF0	; 240
 52e:	85 60       	ori	r24, 0x05	; 5

	LCD_PORT = temp;
 530:	85 bb       	out	0x15, r24	; 21
	LCD_PORT = temp & ~0x04;
 532:	8b 7f       	andi	r24, 0xFB	; 251
 534:	85 bb       	out	0x15, r24	; 21

void LcdPutchar(char ch)
{
	checkbusy();
	write_data(ch);
}
 536:	08 95       	ret

00000538 <LcdPuts>:

void LcdPuts(char* str)
{
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	ec 01       	movw	r28, r24
 53e:	03 c0       	rjmp	.+6      	; 0x546 <LcdPuts+0xe>
   while(*str)
  {
   LcdPutchar(*str);
 540:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>
   str++;
 544:	21 96       	adiw	r28, 0x01	; 1
	write_data(ch);
}

void LcdPuts(char* str)
{
   while(*str)
 546:	88 81       	ld	r24, Y
 548:	88 23       	and	r24, r24
 54a:	d1 f7       	brne	.-12     	; 0x540 <LcdPuts+0x8>
  {
   LcdPutchar(*str);
   str++;
  }
}
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <write_command>:

static void write_command(char command)

{
  char temp;
  temp = (command & 0xF0)|0x04;
 552:	98 2f       	mov	r25, r24
 554:	90 7f       	andi	r25, 0xF0	; 240
 556:	94 60       	ori	r25, 0x04	; 4

LCD_PORT = temp;
 558:	95 bb       	out	0x15, r25	; 21
LCD_PORT = temp & ~0x04;
 55a:	9b 7f       	andi	r25, 0xFB	; 251
 55c:	95 bb       	out	0x15, r25	; 21

temp = (command << 4) | 0x04;
 55e:	82 95       	swap	r24
 560:	80 7f       	andi	r24, 0xF0	; 240
 562:	84 60       	ori	r24, 0x04	; 4

LCD_PORT = temp;
 564:	85 bb       	out	0x15, r24	; 21
LCD_PORT = temp & ~0x04;
 566:	8b 7f       	andi	r24, 0xFB	; 251
 568:	85 bb       	out	0x15, r24	; 21
 56a:	85 e0       	ldi	r24, 0x05	; 5
 56c:	8a 95       	dec	r24
 56e:	f1 f7       	brne	.-4      	; 0x56c <write_command+0x1a>
_delay_us(1);
}
 570:	08 95       	ret

00000572 <LcdCommand>:
	LcdCommand(ENTMOD);

	LcdCommand(DISP_ON);
}
void LcdCommand(char command)
{
 572:	1f 93       	push	r17
 574:	18 2f       	mov	r17, r24
 576:	85 e3       	ldi	r24, 0x35	; 53
 578:	98 2f       	mov	r25, r24
 57a:	9a 95       	dec	r25
 57c:	f1 f7       	brne	.-4      	; 0x57a <LcdCommand+0x8>
	checkbusy();
	write_command(command);
 57e:	98 2f       	mov	r25, r24
 580:	9a 95       	dec	r25
 582:	f1 f7       	brne	.-4      	; 0x580 <LcdCommand+0xe>
 584:	98 2f       	mov	r25, r24
 586:	9a 95       	dec	r25
 588:	f1 f7       	brne	.-4      	; 0x586 <LcdCommand+0x14>
 58a:	98 2f       	mov	r25, r24
 58c:	9a 95       	dec	r25
 58e:	f1 f7       	brne	.-4      	; 0x58c <LcdCommand+0x1a>
 590:	8a 95       	dec	r24
 592:	f1 f7       	brne	.-4      	; 0x590 <LcdCommand+0x1e>
 594:	81 2f       	mov	r24, r17
 596:	0e 94 a9 02 	call	0x552	; 0x552 <write_command>
	if(command==ALLCLR || command==HOME)
 59a:	11 50       	subi	r17, 0x01	; 1
 59c:	12 30       	cpi	r17, 0x02	; 2
 59e:	20 f4       	brcc	.+8      	; 0x5a8 <LcdCommand+0x36>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a0:	80 e4       	ldi	r24, 0x40	; 64
 5a2:	9f e1       	ldi	r25, 0x1F	; 31
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <LcdCommand+0x32>
		_delay_ms(2);
}
 5a8:	1f 91       	pop	r17
 5aa:	08 95       	ret

000005ac <LcdNewchar>:
  LcdCommand(pos);
}


void LcdNewchar(char ch, char font[])
{
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	8b 01       	movw	r16, r22
 int i;

 ch <<=3;
 5b6:	88 0f       	add	r24, r24
 5b8:	88 0f       	add	r24, r24
 5ba:	88 0f       	add	r24, r24
 ch|= 0x40;

 LcdCommand(ch);
 5bc:	80 64       	ori	r24, 0x40	; 64
 5be:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>
 5c2:	c0 e0       	ldi	r28, 0x00	; 0
 5c4:	d0 e0       	ldi	r29, 0x00	; 0

 for(i=0;i<8;i++)
    LcdPutchar(font[i]);
 5c6:	f8 01       	movw	r30, r16
 5c8:	ec 0f       	add	r30, r28
 5ca:	fd 1f       	adc	r31, r29
 5cc:	80 81       	ld	r24, Z
 5ce:	0e 94 80 02 	call	0x500	; 0x500 <LcdPutchar>
 ch <<=3;
 ch|= 0x40;

 LcdCommand(ch);

 for(i=0;i<8;i++)
 5d2:	21 96       	adiw	r28, 0x01	; 1
 5d4:	c8 30       	cpi	r28, 0x08	; 8
 5d6:	d1 05       	cpc	r29, r1
 5d8:	b1 f7       	brne	.-20     	; 0x5c6 <LcdNewchar+0x1a>
    LcdPutchar(font[i]);
}
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	08 95       	ret

000005e4 <LcdMove>:

{ 

//  pos = (line << 6) + pos; 

	if(line == 0 )       pos = 0x00 + pos ;
 5e4:	88 23       	and	r24, r24
 5e6:	49 f0       	breq	.+18     	; 0x5fa <LcdMove+0x16>
	else if( line == 1 ) pos = 0x40 + pos ;
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <LcdMove+0xc>
 5ec:	60 5c       	subi	r22, 0xC0	; 192
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <LcdMove+0x16>
	else if( line == 2 ) pos = 0x10 + pos ;
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <LcdMove+0x14>
 5f4:	60 5f       	subi	r22, 0xF0	; 240
 5f6:	01 c0       	rjmp	.+2      	; 0x5fa <LcdMove+0x16>
	else                 pos = 0x50 + pos ;
 5f8:	60 5b       	subi	r22, 0xB0	; 176

  pos |= 0x80;
 
  LcdCommand(pos);
 5fa:	86 2f       	mov	r24, r22
 5fc:	80 68       	ori	r24, 0x80	; 128
 5fe:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>
}
 602:	08 95       	ret

00000604 <LcdInit>:
static void write_command(char command);
static void write_data(char ch);

void LcdInit(void)
{
	LCD_DDR = 0xff;
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	84 bb       	out	0x14, r24	; 20
 608:	80 e6       	ldi	r24, 0x60	; 96
 60a:	9a ee       	ldi	r25, 0xEA	; 234
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	f1 f7       	brne	.-4      	; 0x60c <LcdInit+0x8>
	_delay_ms(15);
	write_command(0x30);
 610:	80 e3       	ldi	r24, 0x30	; 48
 612:	0e 94 a9 02 	call	0x552	; 0x552 <write_command>
 616:	80 e2       	ldi	r24, 0x20	; 32
 618:	9e e4       	ldi	r25, 0x4E	; 78
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LcdInit+0x16>
	_delay_ms(5);
	write_command(0x30);
 61e:	80 e3       	ldi	r24, 0x30	; 48
 620:	0e 94 a9 02 	call	0x552	; 0x552 <write_command>
 624:	80 ea       	ldi	r24, 0xA0	; 160
 626:	9f e0       	ldi	r25, 0x0F	; 15
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <LcdInit+0x24>
	_delay_ms(1);
	write_command(0x32);
 62c:	82 e3       	ldi	r24, 0x32	; 50
 62e:	0e 94 a9 02 	call	0x552	; 0x552 <write_command>

	LcdCommand(FUNSET);
 632:	88 e2       	ldi	r24, 0x28	; 40
 634:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>
	LcdCommand(DISP_OFF);
 638:	88 e0       	ldi	r24, 0x08	; 8
 63a:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>
	LcdCommand(ALLCLR);
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>
	LcdCommand(ENTMOD);
 644:	86 e0       	ldi	r24, 0x06	; 6
 646:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>

	LcdCommand(DISP_ON);
 64a:	8c e0       	ldi	r24, 0x0C	; 12
 64c:	0e 94 b9 02 	call	0x572	; 0x572 <LcdCommand>
}
 650:	08 95       	ret

00000652 <__udivmodhi4>:
 652:	aa 1b       	sub	r26, r26
 654:	bb 1b       	sub	r27, r27
 656:	51 e1       	ldi	r21, 0x11	; 17
 658:	07 c0       	rjmp	.+14     	; 0x668 <__udivmodhi4_ep>

0000065a <__udivmodhi4_loop>:
 65a:	aa 1f       	adc	r26, r26
 65c:	bb 1f       	adc	r27, r27
 65e:	a6 17       	cp	r26, r22
 660:	b7 07       	cpc	r27, r23
 662:	10 f0       	brcs	.+4      	; 0x668 <__udivmodhi4_ep>
 664:	a6 1b       	sub	r26, r22
 666:	b7 0b       	sbc	r27, r23

00000668 <__udivmodhi4_ep>:
 668:	88 1f       	adc	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	5a 95       	dec	r21
 66e:	a9 f7       	brne	.-22     	; 0x65a <__udivmodhi4_loop>
 670:	80 95       	com	r24
 672:	90 95       	com	r25
 674:	bc 01       	movw	r22, r24
 676:	cd 01       	movw	r24, r26
 678:	08 95       	ret

0000067a <itoa>:
 67a:	fb 01       	movw	r30, r22
 67c:	9f 01       	movw	r18, r30
 67e:	e8 94       	clt
 680:	42 30       	cpi	r20, 0x02	; 2
 682:	c4 f0       	brlt	.+48     	; 0x6b4 <itoa+0x3a>
 684:	45 32       	cpi	r20, 0x25	; 37
 686:	b4 f4       	brge	.+44     	; 0x6b4 <itoa+0x3a>
 688:	4a 30       	cpi	r20, 0x0A	; 10
 68a:	29 f4       	brne	.+10     	; 0x696 <itoa+0x1c>
 68c:	97 fb       	bst	r25, 7
 68e:	1e f4       	brtc	.+6      	; 0x696 <itoa+0x1c>
 690:	90 95       	com	r25
 692:	81 95       	neg	r24
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	64 2f       	mov	r22, r20
 698:	77 27       	eor	r23, r23
 69a:	0e 94 29 03 	call	0x652	; 0x652 <__udivmodhi4>
 69e:	80 5d       	subi	r24, 0xD0	; 208
 6a0:	8a 33       	cpi	r24, 0x3A	; 58
 6a2:	0c f0       	brlt	.+2      	; 0x6a6 <itoa+0x2c>
 6a4:	89 5d       	subi	r24, 0xD9	; 217
 6a6:	81 93       	st	Z+, r24
 6a8:	cb 01       	movw	r24, r22
 6aa:	00 97       	sbiw	r24, 0x00	; 0
 6ac:	a1 f7       	brne	.-24     	; 0x696 <itoa+0x1c>
 6ae:	16 f4       	brtc	.+4      	; 0x6b4 <itoa+0x3a>
 6b0:	5d e2       	ldi	r21, 0x2D	; 45
 6b2:	51 93       	st	Z+, r21
 6b4:	10 82       	st	Z, r1
 6b6:	c9 01       	movw	r24, r18
 6b8:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <strrev>

000006bc <strrev>:
 6bc:	dc 01       	movw	r26, r24
 6be:	fc 01       	movw	r30, r24
 6c0:	67 2f       	mov	r22, r23
 6c2:	71 91       	ld	r23, Z+
 6c4:	77 23       	and	r23, r23
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <strrev+0x4>
 6c8:	32 97       	sbiw	r30, 0x02	; 2
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <strrev+0x18>
 6cc:	7c 91       	ld	r23, X
 6ce:	6d 93       	st	X+, r22
 6d0:	70 83       	st	Z, r23
 6d2:	62 91       	ld	r22, -Z
 6d4:	ae 17       	cp	r26, r30
 6d6:	bf 07       	cpc	r27, r31
 6d8:	c8 f3       	brcs	.-14     	; 0x6cc <strrev+0x10>
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
