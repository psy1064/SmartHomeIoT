
SmartHomeIoT_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000838  000008cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800144  00800144  00000910  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000203  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001031  00000000  00000000  00000b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052d  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bed  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e2  00000000  00000000  000031c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 34       	cpi	r26, 0x44	; 68
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e4       	ldi	r26, 0x44	; 68
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 36       	cpi	r26, 0x6C	; 108
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8a 02 	call	0x514	; 0x514 <main>
  c6:	0c 94 1a 04 	jmp	0x834	; 0x834 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
	   sendDHT();
	   
   }
}
ISR(  USART0_RX_vect )
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
    static unsigned char r_cnt = 0 ;

    rdata = UDR0; 
  e4:	8c b1       	in	r24, 0x0c	; 12
  e6:	80 93 49 01 	sts	0x0149, r24

    if( rdata != '.' )                      // 수신된 데이터가 마지막 문자를 나타내는 데이터(마침표)가 아니면
  ea:	80 91 49 01 	lds	r24, 0x0149
  ee:	8e 32       	cpi	r24, 0x2E	; 46
  f0:	79 f0       	breq	.+30     	; 0x110 <__vector_18+0x42>
    {
        recv_data[r_cnt] = rdata;        //  수신된 문자 저장 
  f2:	80 91 4f 01 	lds	r24, 0x014F
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 91 49 01 	lds	r25, 0x0149
  fe:	e6 5b       	subi	r30, 0xB6	; 182
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	90 83       	st	Z, r25
	    r_cnt++;                         //  수신 문자 갯수 증가 
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 4f 01 	sts	0x014F, r24

		new_recv_flag = 0;
 10a:	10 92 4d 01 	sts	0x014D, r1
 10e:	0d c0       	rjmp	.+26     	; 0x12a <__vector_18+0x5c>
    }
    else if(  rdata == '.' )                // 수신된데이터가 마지막 문자를 나타내는 데이터(마침표) 이면
 110:	80 91 49 01 	lds	r24, 0x0149
 114:	8e 32       	cpi	r24, 0x2E	; 46
 116:	49 f4       	brne	.+18     	; 0x12a <__vector_18+0x5c>
    {
        recv_cnt = r_cnt ;                  // 수신된 데이터 바이트수 저장
 118:	80 91 4f 01 	lds	r24, 0x014F
 11c:	80 93 4e 01 	sts	0x014E, r24
        r_cnt = 0;  
 120:	10 92 4f 01 	sts	0x014F, r1
        
		new_recv_flag = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 4d 01 	sts	0x014D, r24
    }
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0b be       	out	0x3b, r0	; 59
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <pin_init>:
void pin_init()
{
	DDRB |= 0x10;     // LED (PB4 : 출력설정 )
 140:	bc 9a       	sbi	0x17, 4	; 23
	PORTB &= ~0x10;   // PB4  : High ( LED OFF) 
 142:	c4 98       	cbi	0x18, 4	; 24
}
 144:	08 95       	ret

00000146 <init_serial>:
	sei();         // Global Interrupt Enable 
	TCCR0 |= 0x07; // Clock Prescaler N=1024 (Timer 0 Start)
}
void init_serial(void)
{
    UCSR0A = 0x00;                    //초기화
 146:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x18;                    //송수신허용,  송수신 인터럽트 금지
 148:	88 e1       	ldi	r24, 0x18	; 24
 14a:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;                    //데이터 전송비트 수 8비트로 설정.
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	80 93 95 00 	sts	0x0095, r24
    
    UBRR0H = 0x00;
 152:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 103;                     //Baud Rate 9600 
 156:	87 e6       	ldi	r24, 0x67	; 103
 158:	89 b9       	out	0x09, r24	; 9
}
 15a:	08 95       	ret

0000015c <SerialPutChar>:
}


void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 15c:	5d 9b       	sbis	0x0b, 5	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <SerialPutChar>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 160:	8c b9       	out	0x0c, r24	; 12
} // 한 문자를 송신한다.
 162:	08 95       	ret

00000164 <SerialPutString>:

void SerialPutString(char *str)
 {
 164:	fc 01       	movw	r30, r24
 166:	04 c0       	rjmp	.+8      	; 0x170 <SerialPutString+0xc>
}


void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <SerialPutString+0x4>
void SerialPutString(char *str)
 {

    while(*str != '\0')          // 수신된 문자가 Null 문자( 0x00 )가 아니면 
    {
        SerialPutChar(*str++);
 16c:	31 96       	adiw	r30, 0x01	; 1


void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 16e:	8c b9       	out	0x0c, r24	; 12
} // 한 문자를 송신한다.

void SerialPutString(char *str)
 {

    while(*str != '\0')          // 수신된 문자가 Null 문자( 0x00 )가 아니면 
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	c9 f7       	brne	.-14     	; 0x168 <SerialPutString+0x4>
    {
        SerialPutChar(*str++);
    }
} // 문자열을 송신한다.
 176:	08 95       	ret

00000178 <sendDHT>:
    UBRR0L = 103;                     //Baud Rate 9600 
}

void sendDHT()
{
	SerialPutString(i_temp);
 178:	83 e5       	ldi	r24, 0x53	; 83
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 b2 00 	call	0x164	; 0x164 <SerialPutString>
}


void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <sendDHT+0x8>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 184:	8e e2       	ldi	r24, 0x2E	; 46
 186:	8c b9       	out	0x0c, r24	; 12

void sendDHT()
{
	SerialPutString(i_temp);
	SerialPutChar('.');
	SerialPutString(d_temp);
 188:	84 e6       	ldi	r24, 0x64	; 100
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 b2 00 	call	0x164	; 0x164 <SerialPutString>
}


void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 190:	5d 9b       	sbis	0x0b, 5	; 11
 192:	fe cf       	rjmp	.-4      	; 0x190 <sendDHT+0x18>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 194:	8c e2       	ldi	r24, 0x2C	; 44
 196:	8c b9       	out	0x0c, r24	; 12
{
	SerialPutString(i_temp);
	SerialPutChar('.');
	SerialPutString(d_temp);
	SerialPutChar(',');
	SerialPutString(i_rh);
 198:	88 e5       	ldi	r24, 0x58	; 88
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 b2 00 	call	0x164	; 0x164 <SerialPutString>
}


void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <sendDHT+0x28>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 1a4:	8e e2       	ldi	r24, 0x2E	; 46
 1a6:	8c b9       	out	0x0c, r24	; 12
	SerialPutChar('.');
	SerialPutString(d_temp);
	SerialPutChar(',');
	SerialPutString(i_rh);
	SerialPutChar('.');
	SerialPutString(d_rh);
 1a8:	8d e5       	ldi	r24, 0x5D	; 93
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 b2 00 	call	0x164	; 0x164 <SerialPutString>
}
 1b0:	08 95       	ret

000001b2 <HexToDec>:
    LcdPutchar(NumToAsc(cnumber[0]));    // 0.1 자리 디스플레이 
}


void HexToDec( unsigned short num, unsigned short radix) 
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	9c 01       	movw	r18, r24
 1bc:	8b 01       	movw	r16, r22
	int j ;

	for(j=0; j<5 ; j++) cnumber[j] = 0 ;
 1be:	10 92 44 01 	sts	0x0144, r1
 1c2:	10 92 45 01 	sts	0x0145, r1
 1c6:	10 92 46 01 	sts	0x0146, r1
 1ca:	10 92 47 01 	sts	0x0147, r1
 1ce:	10 92 48 01 	sts	0x0148, r1
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
 1d4:	d0 e0       	ldi	r29, 0x00	; 0

	j=0;
	do
	{
		cnumber[j++] = num % radix ; 
 1d6:	c9 01       	movw	r24, r18
 1d8:	b8 01       	movw	r22, r16
 1da:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodhi4>
 1de:	fe 01       	movw	r30, r28
 1e0:	ec 5b       	subi	r30, 0xBC	; 188
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	80 83       	st	Z, r24
 1e6:	21 96       	adiw	r28, 0x01	; 1
		num /= radix; 
 1e8:	c9 01       	movw	r24, r18
 1ea:	b8 01       	movw	r22, r16
 1ec:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodhi4>
 1f0:	9b 01       	movw	r18, r22

	} while(num);
 1f2:	61 15       	cp	r22, r1
 1f4:	71 05       	cpc	r23, r1
 1f6:	79 f7       	brne	.-34     	; 0x1d6 <HexToDec+0x24>
} 
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <NumToAsc>:

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 202:	8a 30       	cpi	r24, 0x0A	; 10
 204:	10 f4       	brcc	.+4      	; 0x20a <NumToAsc+0x8>
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	08 95       	ret
	else          Num += 0x37; 
 20a:	89 5c       	subi	r24, 0xC9	; 201

	return Num ;
}
 20c:	08 95       	ret

0000020e <msec_delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20e:	20 ea       	ldi	r18, 0xA0	; 160
 210:	3f e0       	ldi	r19, 0x0F	; 15
 212:	04 c0       	rjmp	.+8      	; 0x21c <msec_delay+0xe>
 214:	f9 01       	movw	r30, r18
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <msec_delay+0x8>

void msec_delay(unsigned int n)
{	
	for(; n>0; n--)		// 1msec 시간 지연을 n회 반복
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	d1 f7       	brne	.-12     	; 0x214 <msec_delay+0x6>
		_delay_ms(1);		// 1msec 시간 지연
}
 220:	08 95       	ret

00000222 <usec_delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 222:	35 e0       	ldi	r19, 0x05	; 5
 224:	04 c0       	rjmp	.+8      	; 0x22e <usec_delay+0xc>
 226:	23 2f       	mov	r18, r19
 228:	2a 95       	dec	r18
 22a:	f1 f7       	brne	.-4      	; 0x228 <usec_delay+0x6>

void usec_delay(unsigned int n)
{	
	for(; n>0; n--)		// 1usec 시간 지연을 n회 반복
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	d1 f7       	brne	.-12     	; 0x226 <usec_delay+0x4>
		_delay_us(1);		// 1usec 시간 지연
}
 232:	08 95       	ret

00000234 <Display_Number_LCD>:
} // 문자열을 송신한다.
  // 입력   : str - 송신한 문자열을 저장할 버퍼의 주소


void Display_Number_LCD( unsigned int num, unsigned char digit )       // 부호없는 정수형 변수를 10진수 형태로 LCD 에 디스플레이 
{
 234:	1f 93       	push	r17
 236:	16 2f       	mov	r17, r22

	HexToDec( num, 10); //10진수로 변환 
 238:	6a e0       	ldi	r22, 0x0A	; 10
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <HexToDec>

	if( digit == 0 )     digit = 1 ;
 240:	11 23       	and	r17, r17
 242:	81 f1       	breq	.+96     	; 0x2a4 <Display_Number_LCD+0x70>
	if( digit > 5 )      digit = 5 ;
 244:	16 30       	cpi	r17, 0x06	; 6
 246:	10 f0       	brcs	.+4      	; 0x24c <Display_Number_LCD+0x18>
 248:	15 e0       	ldi	r17, 0x05	; 5
 24a:	02 c0       	rjmp	.+4      	; 0x250 <Display_Number_LCD+0x1c>
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
 24c:	15 30       	cpi	r17, 0x05	; 5
 24e:	49 f4       	brne	.+18     	; 0x262 <Display_Number_LCD+0x2e>
 250:	80 91 48 01 	lds	r24, 0x0148
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	10 f4       	brcc	.+4      	; 0x25c <Display_Number_LCD+0x28>
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	01 c0       	rjmp	.+2      	; 0x25e <Display_Number_LCD+0x2a>
	else          Num += 0x37; 
 25c:	89 5c       	subi	r24, 0xC9	; 201
	HexToDec( num, 10); //10진수로 변환 

	if( digit == 0 )     digit = 1 ;
	if( digit > 5 )      digit = 5 ;
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
 25e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 262:	14 30       	cpi	r17, 0x04	; 4
 264:	48 f0       	brcs	.+18     	; 0x278 <Display_Number_LCD+0x44>
 266:	80 91 47 01 	lds	r24, 0x0147
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 26a:	8a 30       	cpi	r24, 0x0A	; 10
 26c:	10 f4       	brcc	.+4      	; 0x272 <Display_Number_LCD+0x3e>
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	01 c0       	rjmp	.+2      	; 0x274 <Display_Number_LCD+0x40>
	else          Num += 0x37; 
 272:	89 5c       	subi	r24, 0xC9	; 201
	if( digit == 0 )     digit = 1 ;
	if( digit > 5 )      digit = 5 ;
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 274:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 278:	13 30       	cpi	r17, 0x03	; 3
 27a:	48 f0       	brcs	.+18     	; 0x28e <Display_Number_LCD+0x5a>
 27c:	80 91 46 01 	lds	r24, 0x0146
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 280:	8a 30       	cpi	r24, 0x0A	; 10
 282:	10 f4       	brcc	.+4      	; 0x288 <Display_Number_LCD+0x54>
 284:	80 5d       	subi	r24, 0xD0	; 208
 286:	01 c0       	rjmp	.+2      	; 0x28a <Display_Number_LCD+0x56>
	else          Num += 0x37; 
 288:	89 5c       	subi	r24, 0xC9	; 201
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 28a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 28e:	11 30       	cpi	r17, 0x01	; 1
 290:	49 f0       	breq	.+18     	; 0x2a4 <Display_Number_LCD+0x70>
 292:	80 91 45 01 	lds	r24, 0x0145
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 296:	8a 30       	cpi	r24, 0x0A	; 10
 298:	10 f4       	brcc	.+4      	; 0x29e <Display_Number_LCD+0x6a>
 29a:	80 5d       	subi	r24, 0xD0	; 208
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <Display_Number_LCD+0x6c>
	else          Num += 0x37; 
 29e:	89 5c       	subi	r24, 0xC9	; 201
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 2a0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>

	if( digit >= 1 )     LcdPutchar(NumToAsc(cnumber[0]));    //  1자리 디스플레이
 2a4:	80 91 44 01 	lds	r24, 0x0144
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	10 f4       	brcc	.+4      	; 0x2b0 <Display_Number_LCD+0x7c>
 2ac:	80 5d       	subi	r24, 0xD0	; 208
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <Display_Number_LCD+0x7e>
	else          Num += 0x37; 
 2b0:	89 5c       	subi	r24, 0xC9	; 201

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이

	if( digit >= 1 )     LcdPutchar(NumToAsc(cnumber[0]));    //  1자리 디스플레이
 2b2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>

}
 2b6:	1f 91       	pop	r17
 2b8:	08 95       	ret

000002ba <Display_TMP_LCD>:


void Display_TMP_LCD( unsigned int tp  )       // 온도를 10진수 형태로 LCD 에 디스플레이 
{

	HexToDec( tp, 10); //10진수로 변환 
 2ba:	6a e0       	ldi	r22, 0x0A	; 10
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <HexToDec>

    LcdPutchar(NumToAsc(cnumber[2]) );   // 10자리 디스플레이
 2c2:	80 91 46 01 	lds	r24, 0x0146
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 2c6:	8a 30       	cpi	r24, 0x0A	; 10
 2c8:	10 f4       	brcc	.+4      	; 0x2ce <Display_TMP_LCD+0x14>
 2ca:	80 5d       	subi	r24, 0xD0	; 208
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <Display_TMP_LCD+0x16>
	else          Num += 0x37; 
 2ce:	89 5c       	subi	r24, 0xC9	; 201
void Display_TMP_LCD( unsigned int tp  )       // 온도를 10진수 형태로 LCD 에 디스플레이 
{

	HexToDec( tp, 10); //10진수로 변환 

    LcdPutchar(NumToAsc(cnumber[2]) );   // 10자리 디스플레이
 2d0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>
	
    LcdPutchar(NumToAsc(cnumber[1]));    // 1자리 디스플레이 
 2d4:	80 91 45 01 	lds	r24, 0x0145
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 2d8:	8a 30       	cpi	r24, 0x0A	; 10
 2da:	10 f4       	brcc	.+4      	; 0x2e0 <Display_TMP_LCD+0x26>
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <Display_TMP_LCD+0x28>
	else          Num += 0x37; 
 2e0:	89 5c       	subi	r24, 0xC9	; 201

	HexToDec( tp, 10); //10진수로 변환 

    LcdPutchar(NumToAsc(cnumber[2]) );   // 10자리 디스플레이
	
    LcdPutchar(NumToAsc(cnumber[1]));    // 1자리 디스플레이 
 2e2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>

    LcdPuts( ".");                       // 소숫점(.) 디스플레이 
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>

    LcdPutchar(NumToAsc(cnumber[0]));    // 0.1 자리 디스플레이 
 2ee:	80 91 44 01 	lds	r24, 0x0144
	} while(num);
} 

char NumToAsc( unsigned char Num )
{
	if( Num <10 ) Num += 0x30; 
 2f2:	8a 30       	cpi	r24, 0x0A	; 10
 2f4:	10 f4       	brcc	.+4      	; 0x2fa <Display_TMP_LCD+0x40>
 2f6:	80 5d       	subi	r24, 0xD0	; 208
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <Display_TMP_LCD+0x42>
	else          Num += 0x37; 
 2fa:	89 5c       	subi	r24, 0xC9	; 201
	
    LcdPutchar(NumToAsc(cnumber[1]));    // 1자리 디스플레이 

    LcdPuts( ".");                       // 소숫점(.) 디스플레이 

    LcdPutchar(NumToAsc(cnumber[0]));    // 0.1 자리 디스플레이 
 2fc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>
}
 300:	08 95       	ret

00000302 <getDHT>:
	SerialPutString(d_rh);
}

void getDHT()
{
	Request();		/* send start pulse */
 302:	0e 94 a3 03 	call	0x746	; 0x746 <Request>
	Response();		/* receive response */
 306:	0e 94 b3 03 	call	0x766	; 0x766 <Response>
	I_RH=Receive_data();	/* store first eight bit in I_RH */
 30a:	0e 94 bb 03 	call	0x776	; 0x776 <Receive_data>
 30e:	80 93 6a 01 	sts	0x016A, r24
	D_RH=Receive_data();	/* store next eight bit in D_RH */
 312:	0e 94 bb 03 	call	0x776	; 0x776 <Receive_data>
 316:	80 93 62 01 	sts	0x0162, r24
	I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 31a:	0e 94 bb 03 	call	0x776	; 0x776 <Receive_data>
 31e:	80 93 69 01 	sts	0x0169, r24
	D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 322:	0e 94 bb 03 	call	0x776	; 0x776 <Receive_data>
 326:	80 93 6b 01 	sts	0x016B, r24
	CheckSum=Receive_data();/* store next eight bit in CheckSum */
 32a:	0e 94 bb 03 	call	0x776	; 0x776 <Receive_data>
 32e:	80 93 63 01 	sts	0x0163, r24
	
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 332:	40 91 62 01 	lds	r20, 0x0162
 336:	20 91 6a 01 	lds	r18, 0x016A
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	24 0f       	add	r18, r20
 33e:	31 1d       	adc	r19, r1
 340:	40 91 69 01 	lds	r20, 0x0169
 344:	24 0f       	add	r18, r20
 346:	31 1d       	adc	r19, r1
 348:	40 91 6b 01 	lds	r20, 0x016B
 34c:	24 0f       	add	r18, r20
 34e:	31 1d       	adc	r19, r1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	28 17       	cp	r18, r24
 354:	39 07       	cpc	r19, r25
 356:	39 f0       	breq	.+14     	; 0x366 <getDHT+0x64>
	{
		LcdMove(0,0);
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts("Error");
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	75 c0       	rjmp	.+234    	; 0x450 <getDHT+0x14e>
	}
		
	else
	{	
		LcdCommand(ALLCLR);
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
		LcdMove(0,0);  
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts("HUM=");
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
		LcdMove(1,0); 
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts("TMP= ");
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>

		itoa(I_RH,i_rh,10);
 38c:	80 91 6a 01 	lds	r24, 0x016A
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	68 e5       	ldi	r22, 0x58	; 88
 394:	71 e0       	ldi	r23, 0x01	; 1
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <itoa>
		LcdMove(0,4);
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts(i_rh);
 3a6:	88 e5       	ldi	r24, 0x58	; 88
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
		LcdMove(0,6);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	66 e0       	ldi	r22, 0x06	; 6
 3b2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts(".");
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
			
		itoa(D_RH,d_rh,10);
 3be:	80 91 62 01 	lds	r24, 0x0162
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	6d e5       	ldi	r22, 0x5D	; 93
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	4a e0       	ldi	r20, 0x0A	; 10
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <itoa>
		LcdMove(0,7);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	67 e0       	ldi	r22, 0x07	; 7
 3d4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts(d_rh);
 3d8:	8d e5       	ldi	r24, 0x5D	; 93
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
		LcdMove(0,8);
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	68 e0       	ldi	r22, 0x08	; 8
 3e4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts("%");
 3e8:	83 e1       	ldi	r24, 0x13	; 19
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
		itoa(I_Temp,i_temp,10);
 3f0:	80 91 69 01 	lds	r24, 0x0169
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	63 e5       	ldi	r22, 0x53	; 83
 3f8:	71 e0       	ldi	r23, 0x01	; 1
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <itoa>
		LcdMove(1,4);
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts(i_temp);
 40a:	83 e5       	ldi	r24, 0x53	; 83
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
		LcdMove(1,6);
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	66 e0       	ldi	r22, 0x06	; 6
 416:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts(".");
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
			
		itoa(D_Temp,d_temp,10);
 422:	80 91 6b 01 	lds	r24, 0x016B
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	64 e6       	ldi	r22, 0x64	; 100
 42a:	71 e0       	ldi	r23, 0x01	; 1
 42c:	4a e0       	ldi	r20, 0x0A	; 10
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <itoa>
		LcdMove(1,7);
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	67 e0       	ldi	r22, 0x07	; 7
 438:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts(d_temp);
 43c:	84 e6       	ldi	r24, 0x64	; 100
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
		LcdMove(1,8);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	68 e0       	ldi	r22, 0x08	; 8
 448:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
		LcdPuts("C");
 44c:	85 e1       	ldi	r24, 0x15	; 21
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 454:	80 e4       	ldi	r24, 0x40	; 64
 456:	9c e9       	ldi	r25, 0x9C	; 156
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <getDHT+0x156>
		
	}
				
	_delay_ms(10);
}
 45c:	08 95       	ret

0000045e <__vector_16>:
		cmd_data = 0xFF;
	}
} 

ISR(TIMER0_OVF_vect)   // Timer0 overflow interrupt( 10 msec)  service routine
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	0b b6       	in	r0, 0x3b	; 59
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31

	static unsigned short  time_index = 0, send_time_index = 0;

    TCNT0 = 256 - 156;       //  내부클럭주기 = 1024/ (16x10^6) = 64 usec,  
 484:	84 e6       	ldi	r24, 0x64	; 100
 486:	82 bf       	out	0x32, r24	; 50
                             //  오버플로인터럽트 주기 = 10msec
                             //  156 = 10msec/ 64usec

    time_index++ ; 
 488:	80 91 50 01 	lds	r24, 0x0150
 48c:	90 91 51 01 	lds	r25, 0x0151
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	90 93 51 01 	sts	0x0151, r25
 496:	80 93 50 01 	sts	0x0150, r24
	
    if( time_index == 500 )    // 샘플링주기 10msec
 49a:	84 5f       	subi	r24, 0xF4	; 244
 49c:	91 40       	sbci	r25, 0x01	; 1
 49e:	41 f4       	brne	.+16     	; 0x4b0 <__vector_16+0x52>
    {
       time_index = 0; 
 4a0:	10 92 51 01 	sts	0x0151, r1
 4a4:	10 92 50 01 	sts	0x0150, r1
	   getDHT();
 4a8:	0e 94 81 01 	call	0x302	; 0x302 <getDHT>
	   sendDHT();
 4ac:	0e 94 bc 00 	call	0x178	; 0x178 <sendDHT>
	   
   }
}
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0b be       	out	0x3b, r0	; 59
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <init>:
	DDRB |= 0x10;     // LED (PB4 : 출력설정 )
	PORTB &= ~0x10;   // PB4  : High ( LED OFF) 
}
void init()
{
	LcdInit();
 4d6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LcdInit>

	LcdCommand(ALLCLR);
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
	LcdMove(0,0);  
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
	LcdPuts("HUM=");
 4e8:	88 e0       	ldi	r24, 0x08	; 8
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
	LcdMove(1,0); 
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
	LcdPuts("TMP= ");
 4f8:	8d e0       	ldi	r24, 0x0D	; 13
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>


/**** Timer0 Overflow Interrupt  ******/

	TCCR0 = 0x00; 
 500:	13 be       	out	0x33, r1	; 51
    TCNT0 = 256 - 100;       //  내부클럭주기 = 8/ (16x10^6) = 0.5 usec,  
 502:	8c e9       	ldi	r24, 0x9C	; 156
 504:	82 bf       	out	0x32, r24	; 50
                             //  오버플로인터럽트 주기 = 50usec
                             //  156 = 50usec/ 0.5use

	TIMSK = 0x01;  // Timer0 overflow interrupt enable 
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	87 bf       	out	0x37, r24	; 55
	
	sei();         // Global Interrupt Enable 
 50a:	78 94       	sei
	TCCR0 |= 0x07; // Clock Prescaler N=1024 (Timer 0 Start)
 50c:	83 b7       	in	r24, 0x33	; 51
 50e:	87 60       	ori	r24, 0x07	; 7
 510:	83 bf       	out	0x33, r24	; 51
}
 512:	08 95       	ret

00000514 <main>:

int main() 
{   
	char eq_count1=0, eq_count2=0, cmd_data = 0xFF  ;  	  
    unsigned char i=0 ;
	DDRA |= 0x10;
 514:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~0x10;
 516:	dc 98       	cbi	0x1b, 4	; 27
		new_recv_flag = 1;
    }
}
void pin_init()
{
	DDRB |= 0x10;     // LED (PB4 : 출력설정 )
 518:	bc 9a       	sbi	0x17, 4	; 23
	PORTB &= ~0x10;   // PB4  : High ( LED OFF) 
 51a:	c4 98       	cbi	0x18, 4	; 24
    unsigned char i=0 ;
	DDRA |= 0x10;
	PORTA &= ~0x10;
	
	pin_init();		  // Pin 초기화
	init();			  // Interrupt , Timer, Register 초기화 
 51c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <init>
	sei();         // Global Interrupt Enable 
	TCCR0 |= 0x07; // Clock Prescaler N=1024 (Timer 0 Start)
}
void init_serial(void)
{
    UCSR0A = 0x00;                    //초기화
 520:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x18;                    //송수신허용,  송수신 인터럽트 금지
 522:	88 e1       	ldi	r24, 0x18	; 24
 524:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;                    //데이터 전송비트 수 8비트로 설정.
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	80 93 95 00 	sts	0x0095, r24
    
    UBRR0H = 0x00;
 52c:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 103;                     //Baud Rate 9600 
 530:	87 e6       	ldi	r24, 0x67	; 103
 532:	89 b9       	out	0x09, r24	; 9
	
	pin_init();		  // Pin 초기화
	init();			  // Interrupt , Timer, Register 초기화 
	init_serial() ;   // Serial Port (USART0) 초기화

	UCSR0B |=  0x80  ;      // UART1 송신(RX) 완료 인터럽트 허용
 534:	57 9a       	sbi	0x0a, 7	; 10

	while (1) 
	{ 
		if( new_recv_flag == 1)
 536:	80 91 4d 01 	lds	r24, 0x014D
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	e1 f7       	brne	.-8      	; 0x536 <main+0x22>
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	18 c0       	rjmp	.+48     	; 0x576 <main+0x62>
		{
			for( i=0; i < recv_cnt ; i++) 
			{
				if( recv_data[i] == Cmd_Message_1[i] ) eq_count1++ ;
 546:	a2 2f       	mov	r26, r18
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	fd 01       	movw	r30, r26
 54c:	e6 5b       	subi	r30, 0xB6	; 182
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	90 81       	ld	r25, Z
 552:	fd 01       	movw	r30, r26
 554:	e4 5c       	subi	r30, 0xC4	; 196
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	80 81       	ld	r24, Z
 55a:	98 17       	cp	r25, r24
 55c:	09 f4       	brne	.+2      	; 0x560 <main+0x4c>
 55e:	3f 5f       	subi	r19, 0xFF	; 255
			    if( recv_data[i] == Cmd_Message_2[i] ) eq_count2++ ; 
 560:	fd 01       	movw	r30, r26
 562:	e6 5b       	subi	r30, 0xB6	; 182
 564:	fe 4f       	sbci	r31, 0xFE	; 254
 566:	90 81       	ld	r25, Z
 568:	a1 5c       	subi	r26, 0xC1	; 193
 56a:	be 4f       	sbci	r27, 0xFE	; 254
 56c:	8c 91       	ld	r24, X
 56e:	98 17       	cp	r25, r24
 570:	09 f4       	brne	.+2      	; 0x574 <main+0x60>
 572:	4f 5f       	subi	r20, 0xFF	; 255

	while (1) 
	{ 
		if( new_recv_flag == 1)
		{
			for( i=0; i < recv_cnt ; i++) 
 574:	2f 5f       	subi	r18, 0xFF	; 255
 576:	80 91 4e 01 	lds	r24, 0x014E
 57a:	28 17       	cp	r18, r24
 57c:	20 f3       	brcs	.-56     	; 0x546 <main+0x32>
			{
				if( recv_data[i] == Cmd_Message_1[i] ) eq_count1++ ;
			    if( recv_data[i] == Cmd_Message_2[i] ) eq_count2++ ; 
            }
	
			if(eq_count1 == 2) cmd_data = 1;
 57e:	32 30       	cpi	r19, 0x02	; 2
 580:	11 f4       	brne	.+4      	; 0x586 <main+0x72>
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	05 c0       	rjmp	.+10     	; 0x590 <main+0x7c>
			else if(eq_count2 == 3) cmd_data = 2;
 586:	43 30       	cpi	r20, 0x03	; 3
 588:	11 f0       	breq	.+4      	; 0x58e <main+0x7a>
 58a:	8e ef       	ldi	r24, 0xFE	; 254
 58c:	01 c0       	rjmp	.+2      	; 0x590 <main+0x7c>
 58e:	82 e0       	ldi	r24, 0x02	; 2
			else cmd_data = 0xFE;
			
			eq_count1 = 0, eq_count2 = 0 , new_recv_flag = 0;
 590:	10 92 4d 01 	sts	0x014D, r1
		}
		if(cmd_data == 1)
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	51 f4       	brne	.+20     	; 0x5ac <main+0x98>
		{
			// Servo_On();
			PORTA |= 0x10;
 598:	dc 9a       	sbi	0x1b, 4	; 27
			LcdCommand(ALLCLR);
 59a:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
			LcdMove(0,0);
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
			LcdPuts("Turn On!!");
 5a6:	87 e1       	ldi	r24, 0x17	; 23
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	21 c0       	rjmp	.+66     	; 0x5ee <main+0xda>
		}
		else if(cmd_data == 2)
 5ac:	82 30       	cpi	r24, 0x02	; 2
 5ae:	59 f4       	brne	.+22     	; 0x5c6 <main+0xb2>
		{
			// Servo_On();
			PORTA &= ~0x10;
 5b0:	dc 98       	cbi	0x1b, 4	; 27
			LcdCommand(ALLCLR);
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
			LcdMove(0,0);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
			LcdPuts("Turn Off!!");
 5c0:	81 e2       	ldi	r24, 0x21	; 33
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	14 c0       	rjmp	.+40     	; 0x5ee <main+0xda>
		}
		else if(cmd_data == 0xFE)
 5c6:	8e 3f       	cpi	r24, 0xFE	; 254
 5c8:	09 f0       	breq	.+2      	; 0x5cc <main+0xb8>
 5ca:	b5 cf       	rjmp	.-150    	; 0x536 <main+0x22>
		{
			LcdCommand(ALLCLR);
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
			LcdMove(0,0);
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
			LcdPuts("Command Error!!");
 5da:	8c e2       	ldi	r24, 0x2C	; 44
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
			LcdMove(1,0);
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LcdMove>
			LcdPuts(recv_data);
 5ea:	8a e4       	ldi	r24, 0x4A	; 74
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 16 03 	call	0x62c	; 0x62c <LcdPuts>
 5f2:	a1 cf       	rjmp	.-190    	; 0x536 <main+0x22>

000005f4 <LcdPutchar>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5f4:	95 e3       	ldi	r25, 0x35	; 53
 5f6:	29 2f       	mov	r18, r25
 5f8:	2a 95       	dec	r18
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LcdPutchar+0x4>

static void write_data(char ch)
{
	unsigned char temp;

	temp = (ch & 0xF0) | 0x05;
 5fc:	29 2f       	mov	r18, r25
 5fe:	2a 95       	dec	r18
 600:	f1 f7       	brne	.-4      	; 0x5fe <LcdPutchar+0xa>
 602:	29 2f       	mov	r18, r25
 604:	2a 95       	dec	r18
 606:	f1 f7       	brne	.-4      	; 0x604 <LcdPutchar+0x10>
 608:	29 2f       	mov	r18, r25
 60a:	2a 95       	dec	r18
 60c:	f1 f7       	brne	.-4      	; 0x60a <LcdPutchar+0x16>
 60e:	9a 95       	dec	r25
 610:	f1 f7       	brne	.-4      	; 0x60e <LcdPutchar+0x1a>
 612:	98 2f       	mov	r25, r24
 614:	90 7f       	andi	r25, 0xF0	; 240
 616:	95 60       	ori	r25, 0x05	; 5

	LCD_PORT = temp;
 618:	95 bb       	out	0x15, r25	; 21
	LCD_PORT = temp & ~0x04;
 61a:	9b 7f       	andi	r25, 0xFB	; 251
 61c:	95 bb       	out	0x15, r25	; 21

	temp = (ch<<4) | 0x05;
 61e:	82 95       	swap	r24
 620:	80 7f       	andi	r24, 0xF0	; 240
 622:	85 60       	ori	r24, 0x05	; 5

	LCD_PORT = temp;
 624:	85 bb       	out	0x15, r24	; 21
	LCD_PORT = temp & ~0x04;
 626:	8b 7f       	andi	r24, 0xFB	; 251
 628:	85 bb       	out	0x15, r24	; 21

void LcdPutchar(char ch)
{
	checkbusy();
	write_data(ch);
}
 62a:	08 95       	ret

0000062c <LcdPuts>:

void LcdPuts(char* str)
{
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	ec 01       	movw	r28, r24
 632:	03 c0       	rjmp	.+6      	; 0x63a <LcdPuts+0xe>
   while(*str)
  {
   LcdPutchar(*str);
 634:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>
   str++;
 638:	21 96       	adiw	r28, 0x01	; 1
	write_data(ch);
}

void LcdPuts(char* str)
{
   while(*str)
 63a:	88 81       	ld	r24, Y
 63c:	88 23       	and	r24, r24
 63e:	d1 f7       	brne	.-12     	; 0x634 <LcdPuts+0x8>
  {
   LcdPutchar(*str);
   str++;
  }
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <write_command>:

static void write_command(char command)

{
  char temp;
  temp = (command & 0xF0)|0x04;
 646:	98 2f       	mov	r25, r24
 648:	90 7f       	andi	r25, 0xF0	; 240
 64a:	94 60       	ori	r25, 0x04	; 4

LCD_PORT = temp;
 64c:	95 bb       	out	0x15, r25	; 21
LCD_PORT = temp & ~0x04;
 64e:	9b 7f       	andi	r25, 0xFB	; 251
 650:	95 bb       	out	0x15, r25	; 21

temp = (command << 4) | 0x04;
 652:	82 95       	swap	r24
 654:	80 7f       	andi	r24, 0xF0	; 240
 656:	84 60       	ori	r24, 0x04	; 4

LCD_PORT = temp;
 658:	85 bb       	out	0x15, r24	; 21
LCD_PORT = temp & ~0x04;
 65a:	8b 7f       	andi	r24, 0xFB	; 251
 65c:	85 bb       	out	0x15, r24	; 21
 65e:	85 e0       	ldi	r24, 0x05	; 5
 660:	8a 95       	dec	r24
 662:	f1 f7       	brne	.-4      	; 0x660 <write_command+0x1a>
_delay_us(1);
}
 664:	08 95       	ret

00000666 <LcdCommand>:
	LcdCommand(ENTMOD);

	LcdCommand(DISP_ON);
}
void LcdCommand(char command)
{
 666:	1f 93       	push	r17
 668:	18 2f       	mov	r17, r24
 66a:	85 e3       	ldi	r24, 0x35	; 53
 66c:	98 2f       	mov	r25, r24
 66e:	9a 95       	dec	r25
 670:	f1 f7       	brne	.-4      	; 0x66e <LcdCommand+0x8>
	checkbusy();
	write_command(command);
 672:	98 2f       	mov	r25, r24
 674:	9a 95       	dec	r25
 676:	f1 f7       	brne	.-4      	; 0x674 <LcdCommand+0xe>
 678:	98 2f       	mov	r25, r24
 67a:	9a 95       	dec	r25
 67c:	f1 f7       	brne	.-4      	; 0x67a <LcdCommand+0x14>
 67e:	98 2f       	mov	r25, r24
 680:	9a 95       	dec	r25
 682:	f1 f7       	brne	.-4      	; 0x680 <LcdCommand+0x1a>
 684:	8a 95       	dec	r24
 686:	f1 f7       	brne	.-4      	; 0x684 <LcdCommand+0x1e>
 688:	81 2f       	mov	r24, r17
 68a:	0e 94 23 03 	call	0x646	; 0x646 <write_command>
	if(command==ALLCLR || command==HOME)
 68e:	11 50       	subi	r17, 0x01	; 1
 690:	12 30       	cpi	r17, 0x02	; 2
 692:	20 f4       	brcc	.+8      	; 0x69c <LcdCommand+0x36>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 694:	80 e4       	ldi	r24, 0x40	; 64
 696:	9f e1       	ldi	r25, 0x1F	; 31
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <LcdCommand+0x32>
		_delay_ms(2);
}
 69c:	1f 91       	pop	r17
 69e:	08 95       	ret

000006a0 <LcdNewchar>:
  LcdCommand(pos);
}


void LcdNewchar(char ch, char font[])
{
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	8b 01       	movw	r16, r22
 int i;

 ch <<=3;
 6aa:	88 0f       	add	r24, r24
 6ac:	88 0f       	add	r24, r24
 6ae:	88 0f       	add	r24, r24
 ch|= 0x40;

 LcdCommand(ch);
 6b0:	80 64       	ori	r24, 0x40	; 64
 6b2:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
 6b6:	c0 e0       	ldi	r28, 0x00	; 0
 6b8:	d0 e0       	ldi	r29, 0x00	; 0

 for(i=0;i<8;i++)
    LcdPutchar(font[i]);
 6ba:	f8 01       	movw	r30, r16
 6bc:	ec 0f       	add	r30, r28
 6be:	fd 1f       	adc	r31, r29
 6c0:	80 81       	ld	r24, Z
 6c2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LcdPutchar>
 ch <<=3;
 ch|= 0x40;

 LcdCommand(ch);

 for(i=0;i<8;i++)
 6c6:	21 96       	adiw	r28, 0x01	; 1
 6c8:	c8 30       	cpi	r28, 0x08	; 8
 6ca:	d1 05       	cpc	r29, r1
 6cc:	b1 f7       	brne	.-20     	; 0x6ba <LcdNewchar+0x1a>
    LcdPutchar(font[i]);
}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	08 95       	ret

000006d8 <LcdMove>:

{ 

//  pos = (line << 6) + pos; 

	if(line == 0 )       pos = 0x00 + pos ;
 6d8:	88 23       	and	r24, r24
 6da:	49 f0       	breq	.+18     	; 0x6ee <LcdMove+0x16>
	else if( line == 1 ) pos = 0x40 + pos ;
 6dc:	81 30       	cpi	r24, 0x01	; 1
 6de:	11 f4       	brne	.+4      	; 0x6e4 <LcdMove+0xc>
 6e0:	60 5c       	subi	r22, 0xC0	; 192
 6e2:	05 c0       	rjmp	.+10     	; 0x6ee <LcdMove+0x16>
	else if( line == 2 ) pos = 0x10 + pos ;
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	11 f4       	brne	.+4      	; 0x6ec <LcdMove+0x14>
 6e8:	60 5f       	subi	r22, 0xF0	; 240
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <LcdMove+0x16>
	else                 pos = 0x50 + pos ;
 6ec:	60 5b       	subi	r22, 0xB0	; 176

  pos |= 0x80;
 
  LcdCommand(pos);
 6ee:	86 2f       	mov	r24, r22
 6f0:	80 68       	ori	r24, 0x80	; 128
 6f2:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
}
 6f6:	08 95       	ret

000006f8 <LcdInit>:
static void write_command(char command);
static void write_data(char ch);

void LcdInit(void)
{
	LCD_DDR = 0xff;
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	84 bb       	out	0x14, r24	; 20
 6fc:	80 e6       	ldi	r24, 0x60	; 96
 6fe:	9a ee       	ldi	r25, 0xEA	; 234
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <LcdInit+0x8>
	_delay_ms(15);
	write_command(0x30);
 704:	80 e3       	ldi	r24, 0x30	; 48
 706:	0e 94 23 03 	call	0x646	; 0x646 <write_command>
 70a:	80 e2       	ldi	r24, 0x20	; 32
 70c:	9e e4       	ldi	r25, 0x4E	; 78
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <LcdInit+0x16>
	_delay_ms(5);
	write_command(0x30);
 712:	80 e3       	ldi	r24, 0x30	; 48
 714:	0e 94 23 03 	call	0x646	; 0x646 <write_command>
 718:	80 ea       	ldi	r24, 0xA0	; 160
 71a:	9f e0       	ldi	r25, 0x0F	; 15
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <LcdInit+0x24>
	_delay_ms(1);
	write_command(0x32);
 720:	82 e3       	ldi	r24, 0x32	; 50
 722:	0e 94 23 03 	call	0x646	; 0x646 <write_command>

	LcdCommand(FUNSET);
 726:	88 e2       	ldi	r24, 0x28	; 40
 728:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
	LcdCommand(DISP_OFF);
 72c:	88 e0       	ldi	r24, 0x08	; 8
 72e:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
	LcdCommand(ALLCLR);
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
	LcdCommand(ENTMOD);
 738:	86 e0       	ldi	r24, 0x06	; 6
 73a:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>

	LcdCommand(DISP_ON);
 73e:	8c e0       	ldi	r24, 0x0C	; 12
 740:	0e 94 33 03 	call	0x666	; 0x666 <LcdCommand>
}
 744:	08 95       	ret

00000746 <Request>:
#define DHT11_PIN PD4
uint8_t c = 0;

void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
 746:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
 748:	94 98       	cbi	0x12, 4	; 18
 74a:	88 ec       	ldi	r24, 0xC8	; 200
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	20 e9       	ldi	r18, 0x90	; 144
 750:	31 e0       	ldi	r19, 0x01	; 1
 752:	f9 01       	movw	r30, r18
 754:	31 97       	sbiw	r30, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <Request+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 758:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 75a:	d9 f7       	brne	.-10     	; 0x752 <Request+0xc>
	_delay_ms(20);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
 75c:	94 9a       	sbi	0x12, 4	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 75e:	85 ed       	ldi	r24, 0xD5	; 213
 760:	8a 95       	dec	r24
 762:	f1 f7       	brne	.-4      	; 0x760 <Request+0x1a>
	_delay_us(40);
}
 764:	08 95       	ret

00000766 <Response>:

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
 766:	8c 98       	cbi	0x11, 4	; 17
	while(PIND & (1<<DHT11_PIN));
 768:	84 99       	sbic	0x10, 4	; 16
 76a:	fe cf       	rjmp	.-4      	; 0x768 <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);
 76c:	84 9b       	sbis	0x10, 4	; 16
 76e:	fe cf       	rjmp	.-4      	; 0x76c <Response+0x6>
	while(PIND & (1<<DHT11_PIN));
 770:	84 99       	sbic	0x10, 4	; 16
 772:	fe cf       	rjmp	.-4      	; 0x770 <Response+0xa>
}
 774:	08 95       	ret

00000776 <Receive_data>:

uint8_t Receive_data()			/* receive data */
{	
 776:	80 91 52 01 	lds	r24, 0x0152
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	40 ea       	ldi	r20, 0xA0	; 160
	for (int q=0; q<8; q++)
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
 780:	84 9b       	sbis	0x10, 4	; 16
 782:	fe cf       	rjmp	.-4      	; 0x780 <Receive_data+0xa>
 784:	94 2f       	mov	r25, r20
 786:	9a 95       	dec	r25
 788:	f1 f7       	brne	.-4      	; 0x786 <Receive_data+0x10>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN)) /* if high pulse is greater than 30ms */
 78a:	84 9b       	sbis	0x10, 4	; 16
 78c:	03 c0       	rjmp	.+6      	; 0x794 <Receive_data+0x1e>
		{
			c = (c<<1)|(0x01);	/* then its logic HIGH */
 78e:	88 0f       	add	r24, r24
 790:	81 60       	ori	r24, 0x01	; 1
 792:	01 c0       	rjmp	.+2      	; 0x796 <Receive_data+0x20>
		}
		else			/* otherwise its logic LOW */
		{
			c = (c<<1);
 794:	88 0f       	add	r24, r24
		}

		while(PIND & (1<<DHT11_PIN));
 796:	84 99       	sbic	0x10, 4	; 16
 798:	fe cf       	rjmp	.-4      	; 0x796 <Receive_data+0x20>
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()			/* receive data */
{	
	for (int q=0; q<8; q++)
 79a:	2f 5f       	subi	r18, 0xFF	; 255
 79c:	3f 4f       	sbci	r19, 0xFF	; 255
 79e:	28 30       	cpi	r18, 0x08	; 8
 7a0:	31 05       	cpc	r19, r1
 7a2:	71 f7       	brne	.-36     	; 0x780 <Receive_data+0xa>
 7a4:	80 93 52 01 	sts	0x0152, r24

		while(PIND & (1<<DHT11_PIN));
		
	}
	return c;
}
 7a8:	08 95       	ret

000007aa <__udivmodhi4>:
 7aa:	aa 1b       	sub	r26, r26
 7ac:	bb 1b       	sub	r27, r27
 7ae:	51 e1       	ldi	r21, 0x11	; 17
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <__udivmodhi4_ep>

000007b2 <__udivmodhi4_loop>:
 7b2:	aa 1f       	adc	r26, r26
 7b4:	bb 1f       	adc	r27, r27
 7b6:	a6 17       	cp	r26, r22
 7b8:	b7 07       	cpc	r27, r23
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <__udivmodhi4_ep>
 7bc:	a6 1b       	sub	r26, r22
 7be:	b7 0b       	sbc	r27, r23

000007c0 <__udivmodhi4_ep>:
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	5a 95       	dec	r21
 7c6:	a9 f7       	brne	.-22     	; 0x7b2 <__udivmodhi4_loop>
 7c8:	80 95       	com	r24
 7ca:	90 95       	com	r25
 7cc:	bc 01       	movw	r22, r24
 7ce:	cd 01       	movw	r24, r26
 7d0:	08 95       	ret

000007d2 <itoa>:
 7d2:	fb 01       	movw	r30, r22
 7d4:	9f 01       	movw	r18, r30
 7d6:	e8 94       	clt
 7d8:	42 30       	cpi	r20, 0x02	; 2
 7da:	c4 f0       	brlt	.+48     	; 0x80c <itoa+0x3a>
 7dc:	45 32       	cpi	r20, 0x25	; 37
 7de:	b4 f4       	brge	.+44     	; 0x80c <itoa+0x3a>
 7e0:	4a 30       	cpi	r20, 0x0A	; 10
 7e2:	29 f4       	brne	.+10     	; 0x7ee <itoa+0x1c>
 7e4:	97 fb       	bst	r25, 7
 7e6:	1e f4       	brtc	.+6      	; 0x7ee <itoa+0x1c>
 7e8:	90 95       	com	r25
 7ea:	81 95       	neg	r24
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	64 2f       	mov	r22, r20
 7f0:	77 27       	eor	r23, r23
 7f2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodhi4>
 7f6:	80 5d       	subi	r24, 0xD0	; 208
 7f8:	8a 33       	cpi	r24, 0x3A	; 58
 7fa:	0c f0       	brlt	.+2      	; 0x7fe <itoa+0x2c>
 7fc:	89 5d       	subi	r24, 0xD9	; 217
 7fe:	81 93       	st	Z+, r24
 800:	cb 01       	movw	r24, r22
 802:	00 97       	sbiw	r24, 0x00	; 0
 804:	a1 f7       	brne	.-24     	; 0x7ee <itoa+0x1c>
 806:	16 f4       	brtc	.+4      	; 0x80c <itoa+0x3a>
 808:	5d e2       	ldi	r21, 0x2D	; 45
 80a:	51 93       	st	Z+, r21
 80c:	10 82       	st	Z, r1
 80e:	c9 01       	movw	r24, r18
 810:	0c 94 0a 04 	jmp	0x814	; 0x814 <strrev>

00000814 <strrev>:
 814:	dc 01       	movw	r26, r24
 816:	fc 01       	movw	r30, r24
 818:	67 2f       	mov	r22, r23
 81a:	71 91       	ld	r23, Z+
 81c:	77 23       	and	r23, r23
 81e:	e1 f7       	brne	.-8      	; 0x818 <strrev+0x4>
 820:	32 97       	sbiw	r30, 0x02	; 2
 822:	04 c0       	rjmp	.+8      	; 0x82c <strrev+0x18>
 824:	7c 91       	ld	r23, X
 826:	6d 93       	st	X+, r22
 828:	70 83       	st	Z, r23
 82a:	62 91       	ld	r22, -Z
 82c:	ae 17       	cp	r26, r30
 82e:	bf 07       	cpc	r27, r31
 830:	c8 f3       	brcs	.-14     	; 0x824 <strrev+0x10>
 832:	08 95       	ret

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
